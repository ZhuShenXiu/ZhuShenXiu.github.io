<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神秀!</title>
  
  <subtitle>知识分享!</subtitle>
  <link href="http://zhushenxiu.github.io/atom.xml" rel="self"/>
  
  <link href="http://zhushenxiu.github.io/"/>
  <updated>2021-12-03T13:24:13.153Z</updated>
  <id>http://zhushenxiu.github.io/</id>
  
  <author>
    <name>ZhuLiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>page</title>
    <link href="http://zhushenxiu.github.io/2021/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E4%B9%A0%E9%A2%9812-3/"/>
    <id>http://zhushenxiu.github.io/2021/12/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E4%B9%A0%E9%A2%9812-3/</id>
    <published>2021-12-03T13:22:27.000Z</published>
    <updated>2021-12-03T13:24:13.153Z</updated>
    
    <content type="html"><![CDATA[<p>1、 创建一个二维数组， 3行4列 arr【3】【4】 =</p><p> {   {0 ， 1， 2， 3}， {4，5，6，7}，{8，9，10，11}} ；</p><p>遍历整个数组，输出数组中最大的数；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;, &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i][j] &gt; maxValue)&#123;</span><br><span class="line">                maxValue = arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,maxValue);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>2、 创建一个二维数组， 对数组中每一个大于5的元素-1， 小于等于5的元素+1， 然后输出数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;, &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i][j] &gt; <span class="number">5</span>) arr[i][j]--;</span><br><span class="line">            <span class="keyword">else</span> arr[i][j]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>3、随机输入两个数，分别是n 和 k, 输出一个大于n 且满足有k个3组成的 最小数</strong></p><p><strong>范围： 1 &lt;= n &lt;= 1e9 (10的9次方)  , 1 &lt;= k &lt;= 6</strong></p><p><strong>例子: 输入 30199 4  输出 ==&gt; 30333   200007 1 ==&gt; 200030</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = n; ; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> tempI = i;</span><br><span class="line">        <span class="keyword">int</span> kCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算tempI中有多少个3 </span></span><br><span class="line">        <span class="keyword">while</span>(tempI &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tempI % <span class="number">10</span> == <span class="number">3</span>) kCount++;</span><br><span class="line">            tempI /= <span class="number">10</span>; <span class="comment">//301</span></span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//tempI中3的个数刚好满足k的需求break </span></span><br><span class="line">        <span class="keyword">if</span>(kCount == k) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">习题答案2</summary>
    
    
    
    <category term="计算机协会资料" scheme="http://zhushenxiu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A%E8%B5%84%E6%96%99/"/>
    
    
    <category term="计算机协会资料" scheme="http://zhushenxiu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法--经典例题</title>
    <link href="http://zhushenxiu.github.io/2021/12/01/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/"/>
    <id>http://zhushenxiu.github.io/2021/12/01/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E6%80%9D%E6%83%B3/</id>
    <published>2021-12-01T09:30:54.000Z</published>
    <updated>2021-12-01T09:59:57.467Z</updated>
    
    <content type="html"><![CDATA[<h2>题目1： 区间选点 </h2>给定 N 个闭区间 [ai,bi]，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。<p>输出选择的点的最小数量。</p><p>位于区间端点上的点也算作区间内。</p><p>输入格式<br>第一行包含整数 N，表示区间数。</p><p>接下来 N 行，每行包含两个整数 ai,bi，表示一个区间的两个端点。</p><p>输出格式<br>输出一个整数，表示所需的点的最小数量。</p><blockquote><p>数据范围<br>1 ≤ N ≤ 105<br>−109 ≤  ai  ≤  bi  ≤  109</p></blockquote><hr><h3>基本思路</h3><p>对所有的区间排序，根据右端点从小到大排序，遍历区间数组，直到该区间的最右端无法覆盖下一个区间的最左端时，</p><p>点+1。</p><p><em><strong>难点：关于给结构体排序</strong></em></p><blockquote><p><em>重载运算符operator</em></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Range</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="comment">//重载用于排序,根据r从小到大排序</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Range &amp;w) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r &lt; w.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; range[i].l &gt;&gt; range[i].r;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(range, range + n); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> point_nums = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right_est = INT_MIN;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(right_est &lt; range[i].l)&#123;</span><br><span class="line">            point_nums++;</span><br><span class="line">            right_est = range[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; point_nums &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><em>lambda 自定义排序sort传入的参数</em></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Range</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(range, range + n, [](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;a, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2>题目2： 最大不相交区间数量</h2>给定 N 个闭区间 [ai,bi]，请你在数轴上选择若干区间，使得选中的区间之间互不相交（包括端点）。<p>输出可选取区间的最大数量。</p><p>输入格式<br>第一行包含整数 N，表示区间数。</p><p>接下来 N 行，每行包含两个整数 ai,bi，表示一个区间的两个端点。</p><p>输出格式<br>输出一个整数，表示可选取区间的最大数量。</p><blockquote><p>数据范围<br>1 ≤ N ≤ 105<br>−109 ≤  ai  ≤  bi  ≤  109</p></blockquote><h3>基本思路</h3>理解为用最多的箭射完气球, 根据最左端点从小到大排序<blockquote><p> <em>使用STL PAIR</em></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">PII s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;s[i].first, &amp;s[i].second);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(s, s + n, [](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;a, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a.first &lt; b.first;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>, right_est = s[<span class="number">0</span>].second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(right_est &lt; s[i].first)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            right_est = s[i].second;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right_est = <span class="built_in">min</span>(s[i].second, right_est);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p> <em><strong>祝大家学习愉快</strong></em></p></blockquote>]]></content>
    
    
    <summary type="html">区间选点 和 最大不相交区间数量</summary>
    
    
    
    <category term="算法" scheme="http://zhushenxiu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://zhushenxiu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Maven-servlet基本配置</title>
    <link href="http://zhushenxiu.github.io/2021/11/29/JavaWeb/Maven-servlet%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>http://zhushenxiu.github.io/2021/11/29/JavaWeb/Maven-servlet%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</id>
    <published>2021-11-29T11:21:40.000Z</published>
    <updated>2021-11-29T12:41:50.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><blockquote><p><em>pom.xml 配置</em></p></blockquote><p>1、servlet导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、jsp导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Web项目-servlet"><a href="#Web项目-servlet" class="headerlink" title="Web项目 servlet"></a>Web项目 servlet</h2><blockquote><p><em>web.xml 配置</em></p></blockquote><p>1、最新配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、servlet 注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>注册的类的相对地址<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/地址<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、配置一些初始化参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置一些web的初始化参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/school<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>4、target文件生成properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>祝大家学习愉快!</strong></em></p></blockquote>]]></content>
    
    
    <summary type="html">随用随查</summary>
    
    
    
    <category term="JavaWeb" scheme="http://zhushenxiu.github.io/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="http://zhushenxiu.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>课后习题</title>
    <link href="http://zhushenxiu.github.io/2021/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E4%B9%A0%E9%A2%98/"/>
    <id>http://zhushenxiu.github.io/2021/11/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A%E8%B5%84%E6%96%99/%E8%AF%BE%E7%A8%8B%E4%B9%A0%E9%A2%98/</id>
    <published>2021-11-26T04:25:54.000Z</published>
    <updated>2021-12-03T13:23:19.450Z</updated>
    
    <content type="html"><![CDATA[<hr><p>1、输入一串数，求对每一个元素的平方之和的平均数。</p><p>例子：输入 5(表示接下来输入5个数) 1 2 3 4 5 ，输出  （1^2 + 2^2 + 3^2 + 4^2 + 5^2）/5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">sum += arr[i] * arr[i];</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> sum / len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, arr[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>,average(arr,n));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>2、输入两个数，求两个数的最大公约数， 比如 输入 15， 18， 输出 3， 输入10，5， 输出5</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="comment">//更相减损术</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)<span class="comment">//用大数减去小数并将结果保存起来</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">            a -= b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a &lt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            b -= a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//如果两个数相等时，则这个数就是最大公约数</span></span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">gcd</span>(a,b));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>3、对于一串数，统计数组中的元素可以被完全开平方(1,4,9,16,25)的个数</p><p>假设输入 6(6表示接下来输入6个数)   1，2，3，4，5，98</p><p>输出 2 （1和4是完全平方数）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqrtNumberCount</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//完全平方数的数量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> sqrtNum = <span class="built_in">sqrt</span>(arr[i]); <span class="comment">//sqrt返回的是整数 sqrt(37) ==&gt; 6 </span></span><br><span class="line"><span class="keyword">if</span>(sqrtNum * sqrtNum == arr[i]) count++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, arr[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sqrtNumberCount(arr,n));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><em><strong>祝大家学习愉快</strong></em></p></blockquote>]]></content>
    
    
    <summary type="html">习题答案1</summary>
    
    
    
    <category term="计算机协会资料" scheme="http://zhushenxiu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A%E8%B5%84%E6%96%99/"/>
    
    
    <category term="计算机协会资料" scheme="http://zhushenxiu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>浅谈链表(二)</title>
    <link href="http://zhushenxiu.github.io/2021/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/doublelink/"/>
    <id>http://zhushenxiu.github.io/2021/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/doublelink/</id>
    <published>2021-11-25T09:59:54.000Z</published>
    <updated>2021-11-26T03:12:02.506Z</updated>
    
    <content type="html"><![CDATA[<hr><h2>二、双链表</h2><p>1、 创建节点，前序指针和后继指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">prev</span>;</span> <span class="comment">//前序指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">next</span>;</span> <span class="comment">//后续指针 </span></span><br><span class="line">&#125;LinkNode;</span><br></pre></td></tr></table></figure><p>2、创建链表</p><blockquote><p><em>尾插法</em></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createLink</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">h-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">LinkNode *p, *q;</span><br><span class="line">p = h;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">q = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">q-&gt;data = arr[i];</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">q-&gt;prev = p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><em>头插法</em></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createLink2</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">h-&gt;prev = h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">LinkNode *p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">p = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">p-&gt;data = arr[i];</span><br><span class="line">p-&gt;next = h-&gt;next;</span><br><span class="line">p-&gt;prev = h;</span><br><span class="line">h-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、插入一个节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertNode</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">LinkNode* p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;data &gt;= x)&#123;</span><br><span class="line">LinkNode* temp = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">temp-&gt;data = x;</span><br><span class="line">temp-&gt;next = p-&gt;next; <span class="comment">//插入的节点后继指针指向p后面的节点</span></span><br><span class="line">temp-&gt;prev = p;  <span class="comment">//插入的节点前序指针指向p</span></span><br><span class="line">p-&gt;next = temp;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、删除一个节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除一个节点 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteNode</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">LinkNode *p, *q;</span><br><span class="line">p = h;</span><br><span class="line"><span class="keyword">if</span>(h-&gt;data == x)&#123;</span><br><span class="line">h = h-&gt;next;</span><br><span class="line">h-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;data == x) &#123;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prev = q;</span><br><span class="line">LinkNode* temp = p;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、打印链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLink</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line">    LinkNode* p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、释放整个链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteLink</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line">LinkNode *p, *q;</span><br><span class="line">p = h;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p><em>测试一下</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;LinkNode* head;</span><br><span class="line">&gt;<span class="keyword">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">createLink</span>(head,arr,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">insertNode</span>(head, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">deleteNode</span>(head, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printLink</span>(head);</span><br><span class="line"><span class="built_in">deleteLink</span>(head);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><em>结果</em></p><p>0 1 2 3 5 5 6 7 8 9</p></blockquote><hr><h2>三、反转双链表</h2><img src="https://i.loli.net/2021/11/26/dPjFfXbmiQqUotA.png"/><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverseLink</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(h == <span class="literal">NULL</span> || h-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span>; <span class="comment">//链表小于两个节点不需要反转 </span></span><br><span class="line">    LinkNode *pre, *cur, *next;</span><br><span class="line">    pre = h-&gt;next;</span><br><span class="line">    cur = pre-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    next = cur-&gt;next; <span class="comment">//保留cur的下一个节点，用于继位</span></span><br><span class="line">    cur-&gt;next = pre; <span class="comment">//前节点的前序指针指向后节点</span></span><br><span class="line">    pre-&gt;prev = cur; <span class="comment">//后节点的后继指针指向前节点</span></span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = next;</span><br><span class="line">&#125;</span><br><span class="line">h-&gt;next-&gt;next = <span class="literal">NULL</span>; <span class="comment">//这里的h-&gt;next 指的是最后一个节点了 </span></span><br><span class="line">h-&gt;next = pre;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p><em>测试一下</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   LinkNode* head;</span><br><span class="line">   <span class="keyword">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">createLink</span>(head,arr,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">insertNode</span>(head, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">deleteNode</span>(head, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printLink</span>(head);</span><br><span class="line"><span class="built_in">reverseLink</span>(head);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\nreverse:&quot;</span>);</span><br><span class="line"><span class="built_in">printLink</span>(head);</span><br><span class="line"><span class="built_in">deleteLink</span>(head);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><em>结果</em></p><p>0 1 2 3 5 5 6 7 8 9<br>reverse:<br>9 8 7 6 5 5 3 2 1 0</p></blockquote><hr><h4>双链表及反转双链表全代码展示<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">prev</span>;</span> <span class="comment">//前序指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>* <span class="title">next</span>;</span> <span class="comment">//后续指针 </span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createLink</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">h-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">LinkNode *p, *q;</span><br><span class="line">p = h;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">q = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">q-&gt;data = arr[i];</span><br><span class="line">p-&gt;next = q;</span><br><span class="line">q-&gt;prev = p;</span><br><span class="line">p = q;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createLink2</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">h-&gt;prev = h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">LinkNode *p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">p = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">p-&gt;data = arr[i];</span><br><span class="line">p-&gt;next = h-&gt;next;</span><br><span class="line">p-&gt;prev = h;</span><br><span class="line">h-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一个节点 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertNode</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">LinkNode* p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;data &gt;= x)&#123;</span><br><span class="line">LinkNode* temp = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">temp-&gt;data = x;</span><br><span class="line">temp-&gt;next = p-&gt;next; <span class="comment">//插入的节点后继指针指向p后面的节点</span></span><br><span class="line">temp-&gt;prev = p;  <span class="comment">//插入的节点前序指针指向p</span></span><br><span class="line">p-&gt;next = temp;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//删除一个节点 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteNode</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">LinkNode *p, *q;</span><br><span class="line">p = h;</span><br><span class="line"><span class="keyword">if</span>(h-&gt;data == x)&#123;</span><br><span class="line">h = h-&gt;next;</span><br><span class="line">h-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;data == x) &#123;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prev = q;</span><br><span class="line">LinkNode* temp = p;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//打印链表 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLink</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line">    LinkNode* p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放整个链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteLink</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line">LinkNode *p, *q;</span><br><span class="line">p = h;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//反转链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverseLink</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(h == <span class="literal">NULL</span> || h-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span>; <span class="comment">//链表小于两个节点不需要反转 </span></span><br><span class="line">    LinkNode *pre, *cur, *next;</span><br><span class="line">    pre = h-&gt;next;</span><br><span class="line">    cur = pre-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    next = cur-&gt;next; <span class="comment">//保留cur的下一个节点，用于继位</span></span><br><span class="line">    cur-&gt;next = pre; <span class="comment">//前节点的前序指针指向后节点</span></span><br><span class="line">    pre-&gt;prev = cur; <span class="comment">//后节点的后继指针指向前节点</span></span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = next;</span><br><span class="line">&#125;</span><br><span class="line">h-&gt;next-&gt;next = <span class="literal">NULL</span>; <span class="comment">//这里的h-&gt;next 指的是最后一个节点了 </span></span><br><span class="line">h-&gt;next = pre;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkNode* head;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="built_in">createLink</span>(head,arr,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">insertNode</span>(head, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">deleteNode</span>(head, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printLink</span>(head);</span><br><span class="line"><span class="built_in">reverseLink</span>(head);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;\nreverse:&quot;</span>);</span><br><span class="line"><span class="built_in">printLink</span>(head);</span><br><span class="line"><span class="built_in">deleteLink</span>(head);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><em><strong>祝大家学习愉快!</strong></em></p></blockquote>]]></content>
    
    
    <summary type="html">双链表和反转双链表</summary>
    
    
    
    <category term="数据结构" scheme="http://zhushenxiu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://zhushenxiu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>processing模拟随机地形生成</title>
    <link href="http://zhushenxiu.github.io/2021/11/21/PROCESSING/PerlinNoise/"/>
    <id>http://zhushenxiu.github.io/2021/11/21/PROCESSING/PerlinNoise/</id>
    <published>2021-11-21T10:52:48.000Z</published>
    <updated>2021-11-26T04:40:04.429Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>实现原理见视频 <a href="https://www.bilibili.com/video/BV16J411T7Ky?p=14">Processing 编程挑战合集_哔哩哔哩_bilibili</a>  P14节</strong></em></p><blockquote><p><em>我做一些小修改</em>  </p></blockquote><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cols,rows;</span><br><span class="line"><span class="keyword">int</span> scl = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">float</span> flying = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span>[][] terrain;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  size(<span class="number">1200</span>, <span class="number">800</span>, P3D);</span><br><span class="line">  cols = <span class="number">2200</span> / scl;</span><br><span class="line">  rows = <span class="number">1600</span> / scl;</span><br><span class="line">  terrain = <span class="keyword">new</span> <span class="keyword">float</span>[cols][rows];</span><br><span class="line">  frameRate(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">  background(<span class="number">0</span>);</span><br><span class="line">   stroke(<span class="number">255</span>);</span><br><span class="line">   noFill();</span><br><span class="line">   translate(width/<span class="number">2</span>, height/<span class="number">2</span>);</span><br><span class="line">   rotateX(PI/<span class="number">3</span>); <span class="comment">//绕X轴旋转120°</span></span><br><span class="line">   translate(-width,-height); <span class="comment">//以右下角为顶点</span></span><br><span class="line">   </span><br><span class="line">   flying -= <span class="number">0.2</span>;</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">float</span> yoff = flying;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; rows; y++)&#123;</span><br><span class="line">    <span class="keyword">float</span> xoff = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; cols; x++)&#123;</span><br><span class="line">      terrain[x][y] = map(noise(xoff,yoff), <span class="number">0</span>, <span class="number">1</span>, -<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">      xoff += <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    yoff += <span class="number">0.2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; rows - <span class="number">1</span>; y++)&#123;</span><br><span class="line">    <span class="comment">//beginShape()开始绘制图形</span></span><br><span class="line">    <span class="comment">//TRIANGLE_STRIP 连接形成三角形</span></span><br><span class="line">   beginShape(TRIANGLE_STRIP);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; cols; x++)&#123;</span><br><span class="line">     <span class="comment">//vertex函数用于添加普通角点。</span></span><br><span class="line">      vertex(x *  scl, y * scl, terrain[x][y]); <span class="comment">//x y z</span></span><br><span class="line">      vertex(x * scl, (y+<span class="number">1</span>) * scl, terrain[x][y+<span class="number">1</span>]);</span><br><span class="line">      <span class="comment">//rect(x * scl, y * scl, scl, scl);</span></span><br><span class="line">    &#125;</span><br><span class="line">   endShape();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//saveFrame();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>祝大家学习愉快！</em></p></blockquote>]]></content>
    
    
    <summary type="html">基于柏林噪音函数的processing模拟随机地形生成代码</summary>
    
    
    
    <category term="PROCESSING" scheme="http://zhushenxiu.github.io/categories/PROCESSING/"/>
    
    
    <category term="PROCESSING" scheme="http://zhushenxiu.github.io/tags/PROCESSING/"/>
    
  </entry>
  
  <entry>
    <title>浅谈链表(一)</title>
    <link href="http://zhushenxiu.github.io/2021/11/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/link/"/>
    <id>http://zhushenxiu.github.io/2021/11/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/link/</id>
    <published>2021-11-17T11:07:48.000Z</published>
    <updated>2021-11-25T13:35:00.856Z</updated>
    
    <content type="html"><![CDATA[<h2> 一、单链表 </h2><p>1、 创建节点 ，节点数据，节点指向的下一个节点的指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、在main函数创建头节点 ，调用创建链表函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    LinkNode *head;</span><br><span class="line">    <span class="built_in">createLink</span>(head, arr, <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建链表函数实现 </p><blockquote><p><em><strong>尾插法</strong></em></p></blockquote><img src="https://i.loli.net/2021/11/24/8tg5ZuixzBjSQAF.png"/><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createLink</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    LinkNode *p, *q; <span class="comment">//辅助节点</span></span><br><span class="line">    <span class="comment">//为头节点申请内存, 这里head不放data</span></span><br><span class="line">    h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode)); <span class="comment">//(LinkNode*) 强制转化为链表节点类型</span></span><br><span class="line">    p = h;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        q = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">        q-&gt;data = arr[i];</span><br><span class="line">        p-&gt;next = q; <span class="comment">//插入在链表尾部</span></span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>头插法</strong></em></p></blockquote><img src="https://i.loli.net/2021/11/24/fl1YctuOUepMSHF.png"/><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createLink2</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    LinkNode *p; <span class="comment">//辅助节点</span></span><br><span class="line">    <span class="comment">//为头节点申请内存, 这里head不放data</span></span><br><span class="line">    h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode)); <span class="comment">//(LinkNode*) 强制转化为链表节点类型</span></span><br><span class="line">    h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        p = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">        p-&gt;data = arr[i];</span><br><span class="line">        p-&gt;next = h-&gt;next; <span class="comment">//插入在链表头部，每一个插入的节点都放在头结点的后面，所以指向头结点的下一个节点</span></span><br><span class="line">        h-&gt;next = p; <span class="comment">//头结点的指针指向该节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在链表中插入一个数，假设插入条件是在第遍历一个data大于等于x的节点后面插入一个数x</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入节点 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertNode</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    LinkNode *p;</span><br><span class="line">    p = h-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data &gt;= x) &#123;</span><br><span class="line">            LinkNode *temp = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">            temp-&gt;data = x;</span><br><span class="line">            temp-&gt;next = p -&gt;next; <span class="comment">//插入的节点指向p后面的节点</span></span><br><span class="line">            p-&gt;next = temp; <span class="comment">//p指向该节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//提前结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、在链表中删除一个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteNode</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">LinkNode *p, *q;</span><br><span class="line">p = h;</span><br><span class="line">    <span class="keyword">if</span>(h-&gt;data == x)&#123; <span class="comment">//如果删除的是节点</span></span><br><span class="line">    h = h-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;data == x)&#123;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">LinkNode* temp = p;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>6、写一个打印链表中所有data的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line">LinkNode* p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、最后写一个释放链表的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteLink</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line">    LinkNode *p, *q;</span><br><span class="line">    p = h;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p><em>测试一下</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">   LinkNode *head;</span><br><span class="line">   <span class="built_in">createLink</span>(head, arr, <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="number">4</span>);</span><br><span class="line">   <span class="built_in">insertNode</span>(head, <span class="number">6</span>);</span><br><span class="line">   <span class="built_in">deleteNode</span>(head, <span class="number">5</span>);</span><br><span class="line">   <span class="built_in">printLink</span>(head);</span><br><span class="line">   <span class="built_in">deleteLink</span>(head);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><em>测试结果</em></p><h2 id="0-1-2-3-4-6-6-7-8-9"><a href="#0-1-2-3-4-6-6-7-8-9" class="headerlink" title="0 1 2 3 4 6 6 7 8 9"></a>0 1 2 3 4 6 6 7 8 9</h2></blockquote><hr><h4>单链表全代码展示<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createLink</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    LinkNode *p, *q; <span class="comment">//辅助节点</span></span><br><span class="line">    <span class="comment">//为头节点申请内存, 这里head不放data</span></span><br><span class="line">    h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode)); <span class="comment">//(LinkNode*) 强制转化为链表节点类型</span></span><br><span class="line">    <span class="comment">/* c++ new</span></span><br><span class="line"><span class="comment">    h = new LinkNode();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    p = h;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        q = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">        q-&gt;data = arr[i];</span><br><span class="line">        p-&gt;next = q;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createLink2</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    LinkNode *p; <span class="comment">//辅助节点</span></span><br><span class="line">    <span class="comment">//为头节点申请内存, 这里head不放data</span></span><br><span class="line">    h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode)); <span class="comment">//(LinkNode*) 强制转化为链表节点类型</span></span><br><span class="line">    h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        p = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">        p-&gt;data = arr[i];</span><br><span class="line">        p-&gt;next = h-&gt;next; <span class="comment">//插入在链表头部，每一个插入的节点都放在头结点的后面，所以指向头结点的下一个节点</span></span><br><span class="line">        h-&gt;next = p; <span class="comment">//头结点的指针指向该节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印链表 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLink</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line">LinkNode* p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertNode</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    LinkNode *p;</span><br><span class="line">    p = h-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data &gt;= x) &#123;</span><br><span class="line">            LinkNode *temp = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">            temp-&gt;data = x;</span><br><span class="line">            temp-&gt;next = p -&gt;next; <span class="comment">//插入的节点指向p后面的节点</span></span><br><span class="line">            p-&gt;next = temp; <span class="comment">//p指向该节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//提前结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteNode</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">LinkNode *p, *q;</span><br><span class="line">p = h;</span><br><span class="line">    <span class="keyword">if</span>(h-&gt;data == x)&#123;</span><br><span class="line">    h = h-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;data == x)&#123;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line">LinkNode* temp = p;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//释放整个链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteLink</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line">LinkNode *p, *q;</span><br><span class="line">p = h;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">q = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    LinkNode *head;</span><br><span class="line">    <span class="built_in">createLink</span>(head, arr, <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">insertNode</span>(head, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">deleteNode</span>(head, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printLink</span>(head);</span><br><span class="line">    <span class="built_in">deleteLink</span>(head);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><em><strong>祝大家学习愉快！</strong></em></p></blockquote>]]></content>
    
    
    <summary type="html">单链表</summary>
    
    
    
    <category term="数据结构" scheme="http://zhushenxiu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://zhushenxiu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>processing太空漫游</title>
    <link href="http://zhushenxiu.github.io/2021/11/14/PROCESSING/fastStar/"/>
    <id>http://zhushenxiu.github.io/2021/11/14/PROCESSING/fastStar/</id>
    <published>2021-11-14T13:51:45.000Z</published>
    <updated>2021-11-24T09:51:13.224Z</updated>
    
    <content type="html"><![CDATA[<h2>    processing太空漫游代码及原理</h2><img src="https://i.loli.net/2021/11/21/PxUOk9BitJgc7VQ.gif"/><hr><p>一、首先创建星星类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _color[] = &#123;<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>&#125;; <span class="comment">//星星的颜色</span></span><br><span class="line">  <span class="keyword">float</span> x; <span class="comment">//x坐标</span></span><br><span class="line">  <span class="keyword">float</span> y; <span class="comment">//y坐标</span></span><br><span class="line">  <span class="keyword">float</span> z; <span class="comment">//控制星星向四周移动的值</span></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">  Star()&#123;</span><br><span class="line">     <span class="comment">//在屏幕随机生成</span></span><br><span class="line">    x = random(-width/<span class="number">2</span>,width/<span class="number">2</span>);</span><br><span class="line">    y = random(-height/<span class="number">2</span>,height/<span class="number">2</span>);</span><br><span class="line">    z = random(<span class="number">0</span>,width);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _color.length; i++)&#123;</span><br><span class="line">      _color[i] = (<span class="keyword">int</span>)random(<span class="number">10</span>,<span class="number">255</span>); <span class="comment">//给每个星星初始化不同颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、 用star数组统一管理，循环初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Star[] stars = <span class="keyword">new</span> Star[<span class="number">350</span>];</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stars.length; i++)&#123; <span class="comment">//init</span></span><br><span class="line">    stars[i] = <span class="keyword">new</span> Star();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/21/2IuRmP5TqcftpA4.png"/><p>三、让星星不断向四周移动，就有了模拟前进的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过update改变z的值，让每一个星星向四周移动</span></span><br><span class="line"><span class="comment">//z == 0 时，其对象代表的星星坐标已经移动出屏幕外，让其重新随机在屏幕内生成。z同时恢复初值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="comment">//设置初始速度，后续可以通过点击鼠标改变速度</span></span><br><span class="line">    z = z - speed;</span><br><span class="line">    <span class="keyword">if</span>(z &lt; <span class="number">1</span>)&#123;</span><br><span class="line">      z = width;</span><br><span class="line">      x = random(-width/<span class="number">2</span>,width/<span class="number">2</span>);</span><br><span class="line">      y = random(-height/<span class="number">2</span>,height/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//绘制星星方法</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fill(_color[<span class="number">0</span>],_color[<span class="number">1</span>],_color[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//随着z的减小，sx,sy 是不断增大的，所以每次绘制就逐渐远离屏幕中心</span></span><br><span class="line">    <span class="keyword">float</span> sx = map(x / z, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, width);</span><br><span class="line">    <span class="keyword">float</span> sy = map(y / z, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, height);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//星星越近，半径越大</span></span><br><span class="line">    <span class="keyword">float</span> r = map(z,<span class="number">0</span>,width, <span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line">    ellipse(sx,sy,r,r);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>四、通过移动鼠标位置改变坐标系中心轴的位置来改变方向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mx = map(mouseX,<span class="number">0</span>,width,-<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">my = map(mouseY,<span class="number">0</span>,height,-<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"><span class="comment">//调整坐标中心点位置</span></span><br><span class="line">translate(width/<span class="number">2</span> + mx,height/<span class="number">2</span> + my);</span><br></pre></td></tr></table></figure><p>五、通过判断鼠标是否点击加速或减速，设置速度的最高阈值和最低阈值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> speed = <span class="number">15</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speedup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mousePressed == <span class="keyword">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(speed &lt;= <span class="number">75</span>)&#123;</span><br><span class="line">      speed += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(speed &gt;= <span class="number">15</span>)&#123;</span><br><span class="line">      speed -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><em><strong>完整演示代码</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">Star[] stars = <span class="keyword">new</span> Star[<span class="number">350</span>];</span><br><span class="line"><span class="keyword">float</span> speed = <span class="number">15</span>, mx, my;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  size(<span class="number">1800</span>,<span class="number">1300</span>,P2D);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stars.length; i++)&#123;</span><br><span class="line">    stars[i] = <span class="keyword">new</span> Star();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">  background(<span class="number">0</span>);</span><br><span class="line">  speedup();</span><br><span class="line">  mx = map(mouseX,<span class="number">0</span>,width,-<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">  my = map(mouseY,<span class="number">0</span>,height,-<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">  <span class="comment">//调整坐标中心点位置</span></span><br><span class="line">  translate(width/<span class="number">2</span> + mx,height/<span class="number">2</span> + my);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stars.length; i++)&#123;</span><br><span class="line">    stars[i].update();</span><br><span class="line">    stars[i].show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _color[] = &#123;<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>&#125;;</span><br><span class="line">  <span class="keyword">float</span> x;</span><br><span class="line">  <span class="keyword">float</span> y;</span><br><span class="line">  <span class="keyword">float</span> z;</span><br><span class="line">  Star()&#123;</span><br><span class="line">    x = random(-width/<span class="number">2</span>,width/<span class="number">2</span>);</span><br><span class="line">    y = random(-height/<span class="number">2</span>,height/<span class="number">2</span>);</span><br><span class="line">    z = random(<span class="number">0</span>,width);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _color.length; i++)&#123;</span><br><span class="line">      _color[i] = (<span class="keyword">int</span>)random(<span class="number">10</span>,<span class="number">255</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    z = z - speed;</span><br><span class="line">    <span class="keyword">if</span>(z &lt; <span class="number">1</span>)&#123;</span><br><span class="line">      z = width;</span><br><span class="line">      x = random(-width/<span class="number">2</span>,width/<span class="number">2</span>);</span><br><span class="line">      y = random(-height/<span class="number">2</span>,height/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fill(_color[<span class="number">0</span>],_color[<span class="number">1</span>],_color[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//随着z的减小，sx,sy 是不断增大的，所以每次绘制就逐渐远离屏幕中心</span></span><br><span class="line">    <span class="keyword">float</span> sx = map(x / z, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, width);</span><br><span class="line">    <span class="keyword">float</span> sy = map(y / z, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, height);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//星星越近，半径越大</span></span><br><span class="line">    <span class="keyword">float</span> r = map(z,<span class="number">0</span>,width, <span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line">    ellipse(sx,sy,r,r);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speedup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mousePressed == <span class="keyword">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(speed &lt;= <span class="number">75</span>)&#123;</span><br><span class="line">      speed += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(speed &gt;= <span class="number">15</span>)&#123;</span><br><span class="line">      speed -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><em>祝大家学习愉快！</em></p></blockquote>]]></content>
    
    
    <summary type="html">processing太空漫游代码及原理</summary>
    
    
    
    <category term="PROCESSING" scheme="http://zhushenxiu.github.io/categories/PROCESSING/"/>
    
    
    <category term="PROCESSING" scheme="http://zhushenxiu.github.io/tags/PROCESSING/"/>
    
  </entry>
  
</feed>
