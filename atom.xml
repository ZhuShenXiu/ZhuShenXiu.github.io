<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神秀!</title>
  
  <subtitle>知识分享!</subtitle>
  <link href="http://zhushenxiu.github.io/atom.xml" rel="self"/>
  
  <link href="http://zhushenxiu.github.io/"/>
  <updated>2021-11-24T08:51:46.679Z</updated>
  <id>http://zhushenxiu.github.io/</id>
  
  <author>
    <name>ZhuLiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>processing模拟随机地形生成</title>
    <link href="http://zhushenxiu.github.io/2021/11/21/PROCESSING/PerlinNoise/"/>
    <id>http://zhushenxiu.github.io/2021/11/21/PROCESSING/PerlinNoise/</id>
    <published>2021-11-21T10:52:48.000Z</published>
    <updated>2021-11-24T08:51:46.679Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>实现原理见视频 <a href="https://www.bilibili.com/video/BV16J411T7Ky?p=14">Processing 编程挑战合集_哔哩哔哩_bilibili</a>  P14节</strong></em></p><blockquote><p><em>我做一些小修改</em>  </p></blockquote><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cols,rows;</span><br><span class="line"><span class="keyword">int</span> scl = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">float</span> flying = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span>[][] terrain;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  size(<span class="number">1200</span>, <span class="number">800</span>, P3D);</span><br><span class="line">  cols = <span class="number">2200</span> / scl;</span><br><span class="line">  rows = <span class="number">1600</span> / scl;</span><br><span class="line">  terrain = <span class="keyword">new</span> <span class="keyword">float</span>[cols][rows];</span><br><span class="line">  frameRate(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">  background(<span class="number">0</span>);</span><br><span class="line">   stroke(<span class="number">255</span>);</span><br><span class="line">   noFill();</span><br><span class="line">   translate(width/<span class="number">2</span>, height/<span class="number">2</span>);</span><br><span class="line">   rotateX(PI/<span class="number">3</span>); <span class="comment">//绕X轴旋转120°</span></span><br><span class="line">   translate(-width,-height); <span class="comment">//以右下角为顶点</span></span><br><span class="line">   </span><br><span class="line">   flying -= <span class="number">0.2</span>;</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">float</span> yoff = flying;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; rows; y++)&#123;</span><br><span class="line">    <span class="keyword">float</span> xoff = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; cols; x++)&#123;</span><br><span class="line">      terrain[x][y] = map(noise(xoff,yoff), <span class="number">0</span>, <span class="number">1</span>, -<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">      xoff += <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    yoff += <span class="number">0.2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; rows - <span class="number">1</span>; y++)&#123;</span><br><span class="line">    <span class="comment">//beginShape()开始绘制图形</span></span><br><span class="line">    <span class="comment">//TRIANGLE_STRIP 连接形成三角形</span></span><br><span class="line">   beginShape(TRIANGLE_STRIP);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; cols; x++)&#123;</span><br><span class="line">     <span class="comment">//vertex函数用于添加普通角点。</span></span><br><span class="line">      vertex(x *  scl, y * scl, terrain[x][y]); <span class="comment">//x y z</span></span><br><span class="line">      vertex(x * scl, (y+<span class="number">1</span>) * scl, terrain[x][y+<span class="number">1</span>]);</span><br><span class="line">      <span class="comment">//rect(x * scl, y * scl, scl, scl);</span></span><br><span class="line">    &#125;</span><br><span class="line">   endShape();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//saveFrame();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>祝大家学习愉快！</em></p></blockquote>]]></content>
    
    
    <summary type="html">基于柏林噪音函数的processing模拟随机地形生成代码</summary>
    
    
    
    <category term="PROCESSING" scheme="http://zhushenxiu.github.io/categories/PROCESSING/"/>
    
    
    <category term="PROCESSING" scheme="http://zhushenxiu.github.io/tags/PROCESSING/"/>
    
  </entry>
  
  <entry>
    <title>浅谈链表(一)</title>
    <link href="http://zhushenxiu.github.io/2021/11/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/link/"/>
    <id>http://zhushenxiu.github.io/2021/11/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/link/</id>
    <published>2021-11-17T11:07:48.000Z</published>
    <updated>2021-11-24T09:47:46.180Z</updated>
    
    <content type="html"><![CDATA[<h2> 一、单链表 </h2><p>1、 创建节点 ，节点数据，节点指向的下一个节点的指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、在main函数创建头节点 ，调用创建链表函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    LinkNode *head;</span><br><span class="line">    <span class="built_in">createList</span>(head, arr, <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、创建链表函数实现 </p><blockquote><p><em><strong>尾插法</strong></em></p></blockquote><img src="link.assets/8tg5ZuixzBjSQAF-16377461279902.png"/><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    LinkNode *p, *q; <span class="comment">//辅助节点</span></span><br><span class="line">    <span class="comment">//为头节点申请内存, 这里head不放data</span></span><br><span class="line">    h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode)); <span class="comment">//(LinkNode*) 强制转化为链表节点类型</span></span><br><span class="line">    <span class="comment">/* c++ new</span></span><br><span class="line"><span class="comment">    h = new LinkNode();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    p = h;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        q = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">        q-&gt;data = arr[i];</span><br><span class="line">        p-&gt;next = q; <span class="comment">//插入在链表尾部</span></span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>头插法</strong></em></p></blockquote><img src="https://i.loli.net/2021/11/24/fl1YctuOUepMSHF.png"/><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList2</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    LinkNode *p; <span class="comment">//辅助节点</span></span><br><span class="line">    <span class="comment">//为头节点申请内存, 这里head不放data</span></span><br><span class="line">    h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode)); <span class="comment">//(LinkNode*) 强制转化为链表节点类型</span></span><br><span class="line">    h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        p = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">        p-&gt;data = arr[i];</span><br><span class="line">        p-&gt;next = h-&gt;next; <span class="comment">//插入在链表头部，每一个插入的节点都放在头结点的后面，所以指向头结点的下一个节点</span></span><br><span class="line">        h-&gt;next = p; <span class="comment">//头结点的指针指向该节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在链表中插入一个数，假设插入条件是在第遍历一个data大于5的节点后面插入一个数x</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    LinkNode *p;</span><br><span class="line">    p = h-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            LinkNode *temp = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">            temp-&gt;data = x;</span><br><span class="line">            temp-&gt;next = p -&gt;next; <span class="comment">//插入的节点指向p后面的节点</span></span><br><span class="line">            p-&gt;next = temp; <span class="comment">//p指向该节点</span></span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//提前结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、最后写一个打印链表中所有data的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line">LinkNode* p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>测试一下</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">   LinkNode *head;</span><br><span class="line">   <span class="built_in">createList</span>(head, arr, <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="number">4</span>);</span><br><span class="line">   <span class="built_in">insertNode</span>(head, <span class="number">6</span>);</span><br><span class="line">   <span class="built_in">printList</span>(head);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p><em>测试结果</em></p><h2 id="0-1-2-3-4-5-6-6-7-8-9"><a href="#0-1-2-3-4-5-6-6-7-8-9" class="headerlink" title="0 1 2 3 4 5 6 6 7 8 9"></a>0 1 2 3 4 5 6 6 7 8 9</h2><p>Process exited after 0.05326 seconds with return value 0<br>请按任意键继续. . .</p></blockquote><h4>单链表全代码展示<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    LinkNode *p, *q; <span class="comment">//辅助节点</span></span><br><span class="line">    <span class="comment">//为头节点申请内存, 这里head不放data</span></span><br><span class="line">    h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode)); <span class="comment">//(LinkNode*) 强制转化为链表节点类型</span></span><br><span class="line">    <span class="comment">/* c++ new</span></span><br><span class="line"><span class="comment">    h = new LinkNode();</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    p = h;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        q = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">        q-&gt;data = arr[i];</span><br><span class="line">        p-&gt;next = q;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList2</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    LinkNode *p; <span class="comment">//辅助节点</span></span><br><span class="line">    <span class="comment">//为头节点申请内存, 这里head不放data</span></span><br><span class="line">    h = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode)); <span class="comment">//(LinkNode*) 强制转化为链表节点类型</span></span><br><span class="line">    h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        p = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">        p-&gt;data = arr[i];</span><br><span class="line">        p-&gt;next = h-&gt;next; <span class="comment">//插入在链表头部，每一个插入的节点都放在头结点的后面，所以指向头结点的下一个节点</span></span><br><span class="line">        h-&gt;next = p; <span class="comment">//头结点的指针指向该节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印链表 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(LinkNode* &amp;h)</span></span>&#123;</span><br><span class="line">LinkNode* p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(LinkNode* &amp;h, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    LinkNode *p;</span><br><span class="line">    p = h-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            LinkNode *temp = (LinkNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LinkNode));</span><br><span class="line">            temp-&gt;data = x;</span><br><span class="line">            temp-&gt;next = p -&gt;next; <span class="comment">//插入的节点指向p后面的节点</span></span><br><span class="line">            p-&gt;next = temp; <span class="comment">//p指向该节点</span></span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//提前结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    LinkNode *head;</span><br><span class="line">    <span class="built_in">createList</span>(head, arr, <span class="built_in"><span class="keyword">sizeof</span></span>(arr)/<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">insertNode</span>(head, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printList</span>(head);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>祝大家学习愉快！</strong></em></p></blockquote>]]></content>
    
    
    <summary type="html">单链表</summary>
    
    
    
    <category term="数据结构" scheme="http://zhushenxiu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://zhushenxiu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>processing太空漫游</title>
    <link href="http://zhushenxiu.github.io/2021/11/14/PROCESSING/fastStar/"/>
    <id>http://zhushenxiu.github.io/2021/11/14/PROCESSING/fastStar/</id>
    <published>2021-11-14T13:51:45.000Z</published>
    <updated>2021-11-22T06:46:36.633Z</updated>
    
    <content type="html"><![CDATA[<h2>    processing太空漫游代码及原理</h2><img src="https://i.loli.net/2021/11/21/PxUOk9BitJgc7VQ.gif"/><hr><p>一、首先创建星星类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _color[] = &#123;<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>&#125;; <span class="comment">//星星的颜色</span></span><br><span class="line">  <span class="keyword">float</span> x; <span class="comment">//x坐标</span></span><br><span class="line">  <span class="keyword">float</span> y; <span class="comment">//y坐标</span></span><br><span class="line">  <span class="keyword">float</span> z; <span class="comment">//控制星星向四周移动的值</span></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">  Star()&#123;</span><br><span class="line">     <span class="comment">//在屏幕随机生成</span></span><br><span class="line">    x = random(-width/<span class="number">2</span>,width/<span class="number">2</span>);</span><br><span class="line">    y = random(-height/<span class="number">2</span>,height/<span class="number">2</span>);</span><br><span class="line">    z = random(<span class="number">0</span>,width);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _color.length; i++)&#123;</span><br><span class="line">      _color[i] = (<span class="keyword">int</span>)random(<span class="number">10</span>,<span class="number">255</span>); <span class="comment">//给每个星星初始化不同颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、 用star数组统一管理，循环初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Star[] stars = <span class="keyword">new</span> Star[<span class="number">350</span>];</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stars.length; i++)&#123; <span class="comment">//init</span></span><br><span class="line">    stars[i] = <span class="keyword">new</span> Star();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/21/2IuRmP5TqcftpA4.png"/><p>三、让星星不断向四周移动，就有了模拟前进的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过update改变z的值，让每一个星星向四周移动</span></span><br><span class="line"><span class="comment">//z == 0 时，其对象代表的星星坐标已经移动出屏幕外，让其重新随机在屏幕内生成。z同时恢复初值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="comment">//设置初始速度，后续可以通过点击鼠标改变速度</span></span><br><span class="line">    z = z - speed;</span><br><span class="line">    <span class="keyword">if</span>(z &lt; <span class="number">1</span>)&#123;</span><br><span class="line">      z = width;</span><br><span class="line">      x = random(-width/<span class="number">2</span>,width/<span class="number">2</span>);</span><br><span class="line">      y = random(-height/<span class="number">2</span>,height/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//绘制星星方法</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fill(_color[<span class="number">0</span>],_color[<span class="number">1</span>],_color[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//随着z的减小，sx,sy 是不断增大的，所以每次绘制就逐渐远离屏幕中心</span></span><br><span class="line">    <span class="keyword">float</span> sx = map(x / z, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, width);</span><br><span class="line">    <span class="keyword">float</span> sy = map(y / z, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, height);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//星星越近，半径越大</span></span><br><span class="line">    <span class="keyword">float</span> r = map(z,<span class="number">0</span>,width, <span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line">    ellipse(sx,sy,r,r);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>四、通过移动鼠标位置改变坐标系中心轴的位置来改变方向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mx = map(mouseX,<span class="number">0</span>,width,-<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">my = map(mouseY,<span class="number">0</span>,height,-<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line"><span class="comment">//调整坐标中心点位置</span></span><br><span class="line">translate(width/<span class="number">2</span> + mx,height/<span class="number">2</span> + my);</span><br></pre></td></tr></table></figure><p>五、通过判断鼠标是否点击加速或减速，设置速度的最高阈值和最低阈值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> speed = <span class="number">15</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speedup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mousePressed == <span class="keyword">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(speed &lt;= <span class="number">75</span>)&#123;</span><br><span class="line">      speed += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(speed &gt;= <span class="number">15</span>)&#123;</span><br><span class="line">      speed -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><em><strong>完整演示代码</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">Star[] stars = <span class="keyword">new</span> Star[<span class="number">350</span>];</span><br><span class="line"><span class="keyword">float</span> speed = <span class="number">15</span>, mx, my;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  size(<span class="number">1800</span>,<span class="number">1300</span>,P2D);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stars.length; i++)&#123;</span><br><span class="line">    stars[i] = <span class="keyword">new</span> Star();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">  background(<span class="number">0</span>);</span><br><span class="line">  speedup();</span><br><span class="line">  mx = map(mouseX,<span class="number">0</span>,width,-<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">  my = map(mouseY,<span class="number">0</span>,height,-<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">  <span class="comment">//调整坐标中心点位置</span></span><br><span class="line">  translate(width/<span class="number">2</span> + mx,height/<span class="number">2</span> + my);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stars.length; i++)&#123;</span><br><span class="line">    stars[i].update();</span><br><span class="line">    stars[i].show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> _color[] = &#123;<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>&#125;;</span><br><span class="line">  <span class="keyword">float</span> x;</span><br><span class="line">  <span class="keyword">float</span> y;</span><br><span class="line">  <span class="keyword">float</span> z;</span><br><span class="line">  Star()&#123;</span><br><span class="line">    x = random(-width/<span class="number">2</span>,width/<span class="number">2</span>);</span><br><span class="line">    y = random(-height/<span class="number">2</span>,height/<span class="number">2</span>);</span><br><span class="line">    z = random(<span class="number">0</span>,width);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _color.length; i++)&#123;</span><br><span class="line">      _color[i] = (<span class="keyword">int</span>)random(<span class="number">10</span>,<span class="number">255</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    z = z - speed;</span><br><span class="line">    <span class="keyword">if</span>(z &lt; <span class="number">1</span>)&#123;</span><br><span class="line">      z = width;</span><br><span class="line">      x = random(-width/<span class="number">2</span>,width/<span class="number">2</span>);</span><br><span class="line">      y = random(-height/<span class="number">2</span>,height/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fill(_color[<span class="number">0</span>],_color[<span class="number">1</span>],_color[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//随着z的减小，sx,sy 是不断增大的，所以每次绘制就逐渐远离屏幕中心</span></span><br><span class="line">    <span class="keyword">float</span> sx = map(x / z, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, width);</span><br><span class="line">    <span class="keyword">float</span> sy = map(y / z, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, height);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//星星越近，半径越大</span></span><br><span class="line">    <span class="keyword">float</span> r = map(z,<span class="number">0</span>,width, <span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line">    ellipse(sx,sy,r,r);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speedup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mousePressed == <span class="keyword">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(speed &lt;= <span class="number">75</span>)&#123;</span><br><span class="line">      speed += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(speed &gt;= <span class="number">15</span>)&#123;</span><br><span class="line">      speed -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><em>祝大家学习愉快！</em></p></blockquote>]]></content>
    
    
    <summary type="html">processing太空漫游代码及原理</summary>
    
    
    
    <category term="PROCESSING" scheme="http://zhushenxiu.github.io/categories/PROCESSING/"/>
    
    
    <category term="PROCESSING" scheme="http://zhushenxiu.github.io/tags/PROCESSING/"/>
    
  </entry>
  
  <entry>
    <title>皇后问题</title>
    <link href="http://zhushenxiu.github.io/2021/11/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/queenQuestion/"/>
    <id>http://zhushenxiu.github.io/2021/11/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/queenQuestion/</id>
    <published>2021-11-14T12:36:45.000Z</published>
    <updated>2021-11-24T09:07:20.368Z</updated>
    
    <content type="html"><![CDATA[<hr><p>n− 皇后问题是指将 n 个皇后放在 n×n 的国际象棋棋盘上，使得皇后不能相互攻击到，即任意两个皇后都不能处于同一行、同一列或同一斜线上。</p><p>现在给定整数 n，请你输出所有的满足条件的棋子摆法。</p><p>输入格式<br>共一行，包含整数 n。</p><p>输出格式<br>每个解决方案占 n 行，每行输出一个长度为 n 的字符串，用来表示完整的棋盘状态。</p><p>其中 . 表示某一个位置的方格状态为空，Q 表示某一个位置的方格上摆着皇后。</p><p>每个方案输出完成后，输出一个空行。</p><p>注意：行末不能有多余空格。</p><p>输出方案的顺序任意，只要不重复且没有遗漏即可。</p><p>数据范围<br>1≤n≤9</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> g[N][N];</span><br><span class="line"><span class="keyword">bool</span> row[N], col[N], dg[N], udg[N]; <span class="comment">//行 列 对角线 反对角线</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y == n)&#123;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(x == n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == n)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">puts</span>(g[i]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不放皇后</span></span><br><span class="line">    <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, s);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//放皇后</span></span><br><span class="line">    <span class="keyword">if</span>(!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp; !udg[x - y + n])&#123;</span><br><span class="line">        g[x][y] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        row[x] = col[y] = dg[x + y] = udg[x - y + n] = <span class="literal">true</span>; <span class="comment">//true表示放置过</span></span><br><span class="line">        <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, s + <span class="number">1</span>);</span><br><span class="line">        row[x] = col[y] = dg[x + y] = udg[x - y + n] = <span class="literal">false</span>;</span><br><span class="line">        g[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">八皇后代码实现--DFS回溯法</summary>
    
    
    
    <category term="数据结构" scheme="http://zhushenxiu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://zhushenxiu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
